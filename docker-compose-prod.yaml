version: '3.8'

services:
  db:
    restart: always
    image: postgres:13.3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    env_file:
      - .env  # Specify the environment file for the db service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: >
      sh -c "python manage.py makemigrations  && python manage.py migrate && 
            python manage.py collectstatic --noinput && gunicorn backend.wsgi --bind 0.0.0.0:8000 --workers 3"
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - media_data:/usr/src/app/media
      - static_data:/usr/src/app/static
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - react_build:/usr/src/app/dist
    env_file:
      - .env
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL}
      VITE_FRONTEND_URL: ${VITE_FRONTEND_URL}
      VITE_MEDIA_URL: ${VITE_MEDIA_URL}

  nginx:
    restart: always
    image: nginx:latest
    ports:
      - 80:8080
    volumes:
      - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
      - react_build:/var/www/react
      - media_data:/var/www/media
      - static_data:/var/www/static
    depends_on:
      - backend
      - frontend

volumes:
  react_build:
  postgres_data:
  media_data:
  static_data:
