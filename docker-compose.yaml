version: '3.8'

services:
  db:
    restart: always
    image: postgres:13.3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - "8080:8080"

  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - .:/usr/src/app
      # - ./.env:/app/django/.env  # Mount the .env file as a volume
      - ./.env:/usr/src/app/.env 
    ports:
      - "8000:8000"
    env_file:
      - .env
    command: >
      sh -c "python backend/manage.py makemigrations && python backend/manage.py migrate &&
             python backend/manage.py runserver 0.0.0.0:8000"
    # command: >
    #   sh -c "python backend/manage.py makemigrations && python backend/manage.py migrate &&
    #          gunicorn --bind 0.0.0.0:8000 backend.backend.wsgi:application"
    # command: gunicorn --bind 0.0.0.0:8000 backend.wsgi:application
    # command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - .:/usr/src/app
      - ./.env:/usr/src/.env 
    env_file:
      - .env
    ports:
      - "80:80"  # Map nginx's default port 80 to port 80 on the host

volumes:
  postgres_data:
